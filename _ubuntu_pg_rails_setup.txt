I. Initial Server Setup with Ubuntu 14.04 (https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-14-04) part of the series

    1) Root login
        ssh root@SERVER_IP_ADDRESS

    2) Create a new user
        adduser demo

    3) Root Privileges
        gpasswd -a demo sudo

II. Ruby on Rails with rbenv on Ubuntu (https://www.digitalocean.com/community/tutorials/how-to-install-ruby-on-rails-with-rbenv-on-ubuntu-14-04)

    1) Install rbenv
      — sudo apt-get update
      — sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev
      — cd
        git clone git://github.com/sstephenson/rbenv.git .rbenv
        echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bash_profile
        echo 'eval "$(rbenv init -)"' >> ~/.bash_profile

        git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
        echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' >> ~/.bash_profile
        source ~/.bash_profile

    2) Install Ruby
        rbenv install -v 2.2.1
        rbenv global 2.2.1
            ruby -v
        gem install bundler

    3) Install Rails
      — gem install rails
      — rbenv rehash
            rails -v

    4) Install Javascript Runtime
        sudo add-apt-repository ppa:chris-lea/node.js
        sudo apt-get update
        sudo apt-get install nodejs

III. How To Use PostgreSQL with Your Ruby on Rails Application on Ubuntu (https://www.digitalocean.com/community/tutorials/how-to-use-postgresql-with-your-ruby-on-rails-application-on-ubuntu-14-04)

    1) Install PostgreSQL
        sudo apt-get update
        sudo apt-get install postgresql postgresql-contrib libpq-dev

    2) Create Database User
        sudo -u postgres createuser -s pguser
        sudo -u postgres psql (this enters PG console mode)
            \password pguser
            \q

    3) Configure Database Connection
        vi config/database.yml (rails folder)
              host: localhost
              username: pguser
              password: pguser_password

             ( development:
                adapter: postgresql
                encoding: unicode
                database: myapp_development
                pool: 5
                username: myapp
                password: password1

             test:
                adapter: postgresql
                encoding: unicode
                database: myapp_test
                pool: 5
                username: myapp
                password: password1 )

             (username: appname
              password: <%= ENV['APPNAME_DATABASE_PASSWORD'] %>)

        rake db:setup

    4) Install rbenv-vars Plugin
        cd ~/.rbenv/plugins
        git clone https://github.com/sstephenson/rbenv-vars.git

    5) Set Environment Variables
        cd ~/appname
        rake secret (copy secret key here)

        vi .rbenv-vars
            SECRET_KEY_BASE=your_generated_secret (key from earlier)
            APPNAME_DATABASE_PASSWORD=prod_db_pass (DB password)

        rbenv vars (views the variables)

    6) Create Production Database
        RAILS_ENV=production rake db:create

    7) Install Unicorn
        vi Gemfile
            gem 'unicorn'
        bundle

    8) Configure Unicorn
        vi config/unicorn.rb
            # set path to application
            app_dir = File.expand_path("../..", __FILE__)
            shared_dir = "#{app_dir}/shared"
            working_directory app_dir


            # Set unicorn options
            worker_processes 2
            preload_app true
            timeout 30

            # Set up socket location
            listen "#{shared_dir}/sockets/unicorn.sock", :backlog => 64

            # Logging
            stderr_path "#{shared_dir}/log/unicorn.stderr.log"
            stdout_path "#{shared_dir}/log/unicorn.stdout.log"

            # Set master PID location
            pid "#{shared_dir}/pids/unicorn.pid"

        mkdir -p shared/pids shared/sockets shared/log (creating an folder we referenced in the log)















































