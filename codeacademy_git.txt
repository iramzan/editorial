1. A Working Directory: where you'll be doing all the work: creating, editing, deleting and organizing files
2. A Staging Area: where you'll list changes you make to the working directory
3. A Repository: where Git permanently stores those changes as different versions of the project

git init - creates a new Git repository
git status - inspects the contents of the working directory and staging area
git add - adds files from the working directory to the staging area
git diff - shows the difference between the working directory and the staging area
git commit - permanently stores file changes from the staging area in the repository
git log - shows a list of all previous commits
git show HEAD - In many cases, the most recently made commit is the HEAD commit.
        The output of this command will display everything the git log command displays for the HEAD commit, plus all the file changes that were committed.
        
git checkout HEAD filename - will restore the file in your working directory to look exactly as it did when you last made a commit.
git add filename_1 filename_2 - adding few file simultaneously
git reset HEAD filename - unstage file from a staging area

Creating a project is like hiking in a dark forest. Sometimes you take a wrong turn, then another wrong turn. Before you know it, you're surrounded by bears.

Git enables you to rewind to the part before you made the wrong turn and create a new destiny for the project. You can do this with:

git reset SHA (git reset 5d69206) - resets to a commit SHA (first 7 digits of commit code)
https://s3.amazonaws.com/codecademy-content/courses/learn-git/git-diagram-3.svg

git branch - you can use the command below to answer the question: “which branch am I on?”
git branch new_branch - to create a new branch
git checkout branch_name - with this you can switch to the new branch
git merge branch_name - merging branches

...
Let's say you decide you'd like to merge the changes from fencing into master.
Here's where the trouble begins! You've made commits on separate branches that alter
the same line in conflicting ways. Now, when you try to merge fencing into master,
Git will not know which version of the file to keep.

    1. Switch to the master branch.
    2. From the terminal, enter the command below:

        git merge fencing

        This will try to merge fencing into master.

        In the output, notice the lines:

        CONFLICT (content): Merge conflict in resumé.txt
        Automatic merge failed; fix conflicts and then commit the result.

    3. We must fix the merge conflict.

        In the code editor, look at resume.txt. Git uses markings to indicate the HEAD (master) version of the file and the fencing version of the file, like this:

        <<<<<<< HEAD
        master version of line
        =======
        fencing version of line
        >>>>>>> fencing

        Git asks us which version of the file to keep: the version on master or the version on fencing. You decide you want the fencing version.

        From the code editor:

        Delete the content of the line as it appears in the master branch

        Delete all of Git's special markings including the words HEAD and fencing. If any of Git's markings remain, for example, >>>>>>> and =======, the conflict remains.

    4. Add resume.txt to the staging area.

    5. Now, make a commit. For your commit message, type "Resolve merge conflict" to indicate the purpose of the commit.

git branch -d branch_name - deletes the git branch
git branch -D branch_name - deletes the branch with override (will delete not fully merged branch)


git clone remote_location clone_name - clones the remote to local machine
git remote -v - you can see a list of a Git project's remotes with this command

git fetch - This command will not merge changes from the remote into your local repository. It brings those changes onto what's called a remote branch.
An easy way to see if changes have been made to the remote and bring the changes down to your local copy is with this command.

    Now that you've merged origin/master into your local master branch, you're ready to contribute some work of your own. The workflow for Git collaborations typically follows this order:

    1. Fetch and merge changes from the remote
    2. Create a branch to work on a new project feature
    3. Develop the feature on your branch and commit your work
    4. Fetch and merge from the remote again (in case new commits were made while you were working)
    5. Push your branch up to the remote for review

        $ cd my-quizzes
        $ git branch bio-questions
        $ git checkout bio-questions
        Switched to branch 'bio-questions'
        $ git add biology.txt
        $ git commit -m 'bio update'
        [bio-questions 9413039] bio update
         1 file changed, 5 insertions(+)

                                                                            

