/* Direct children */

p {
    font-family: Garamond;
}

body > p {
    font-weight: bold;
}

div > p {
    color: #7AC5CD;
}

li > p {
    color: #000000;
    text-decoration: underline;
}


/*

As we mentioned, certain selectors will "override" others if they have a greater specificity value.
ul li p { is more specific CSS than just p {, so when CSS sees tags that are both <p> tags and happen
to be inside unordered lists, it will apply the more specific styling (ul li p {) to the text inside the lists.

*/


/* PSEUDO SELECTORS

A pseudo-class selector is a way of accessing HTML items that aren't part of the document tree
(remember the tree structure we talked about earlier?). For instance, it's very easy to see where
a link is in the tree. But where would you find information about whether a link had been clicked
on or not? It isn't there!

Pseudo-class selectors let us style these kinds of changes in our HTML document.
For example, we saw we could change a link's text-decoration property to make it something
other than blue and underlined. Using pseudo selectors, you can control the appearance of
unvisited and visited linksâ€”even links the user is hovering over but hasn't clicked!

---------------------------

Another useful pseudo-class selector is first-child.
It's used to apply styling to only the elements that are the first children of their parents. For instance:

p:first-child {
    color: red;
}
Would make all paragraphs that are the first children of their parent elements red.

------------------

nth-child; you just add the child's number in parentheses after the pseudo-class selector.

For example,

p:nth-child(2) {
    color: red;
}

Would turn every paragraph that is the second child of its parent element red.
The element that is the child goes before :nth-child; its parent element is the element that contains it.

------------------
*/


/* ROUND DIVS */

div {
    border-radius: 60%;
 }


/* DISPLAY PROPERTY

We can change all this with the first positioning property we'll learn: the display property. We'll learn about four possible values.

block: This makes the element a block box. It won't let anything sit next to it on the page! It takes up the full width.

inline-block: This makes the element a block box, but will allow other elements to sit next to it on the same line.

inline: This makes the element sit on the same line as another element, but without formatting it like a block. It only takes up as much width as it needs (not the whole line).
The inline display value is better suited for HTML elements that are blocks by default, such as headers and paragraphs.

none: This makes the element and its content disappear from the page entirely!

*/